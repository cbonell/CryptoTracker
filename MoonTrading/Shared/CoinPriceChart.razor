@inject IJSRuntime js
@inject IMLModelData mlModeldata
@inject ICryptoWatchData cryptoWatch
@inject ICoinGeckoData geckoData
@namespace MoonTrading.Shared

@using System.Globalization
@using MoonTrading.DataAccess.MLModelAccess

@if (chartsAreSupported)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-sm-4 btn-group">
                <button id="chartDrawButton" class="btn btn-primary">Draw</button>
                <button id="chartDrawCloseButton" class="btn btn-danger" style="display: none">Close</button>
            </div>
        </div>
    </div>
}
@*Used as a placeholder for the drawing chart*@
<div id="canvasParent"></div>



<div class="chartWrapper">
    @if (chartsAreSupported)
    {
        <EditForm Model="rangeInput">
            <InputRadioGroup @bind-Value="rangeInput.Name">
                @foreach (string type in ChartUserTimeOptions)
                {
                <InputRadio Value="type" class="form-check-input" @onclick="LoadData" />
                <label class="form-check-label">
                    @type
                </label>
                }
        </InputRadioGroup>
    </EditForm>
    }
    else
    {
        <p>This feature is not supported for this coin</p>
    }
    <div id="priceWrapper">
        <div id="linechart_div"></div>
    </div>
    <div id="chart_div"></div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public CoinGeckCoinModel Coin { get; set; }

    RangeInput rangeInput;
    bool chartsAreSupported = true;

    public CoinPriceChart()
    {
        rangeInput = new();
        Coin = new();
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMMM dd h:mm tt");
        }

        return string.Empty;
    }

    string FormatAsUSD(object value)
    {
        if (value != null)
        {
            return Convert.ToDouble(value).ToString("C2");
        }

        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        DateTimeOffset fromDate = cryptoWatch.GetOffsetFromInterval(rangeInput.Name);
        CoinPriceVolumePair coinPriceAndVolume = new();

        if (chartsAreSupported)
        {
            try
            {
                List<DatePricePairModel> predictionsData = new();
                try
                {
                    predictionsData = await mlModeldata.GetPricePrediction(Coin.Symbol);
                }
                catch (Exception) { }

                coinPriceAndVolume = await cryptoWatch.GetCoinPriceVolumePair(Coin.Symbol, fromDate, rangeInput.Name);
                predictionsData = new();

                await js.InvokeVoidAsync("makeBarChart", "chart_div", coinPriceAndVolume.VolumePairs);
                if (predictionsData.Count > 0)
                {
                    await js.InvokeVoidAsync("makeLineChart", "linechart_div", coinPriceAndVolume.DatePricePairs, predictionsData);
                }
                else
                {
                    await js.InvokeVoidAsync("makeLineChart", "linechart_div", coinPriceAndVolume.DatePricePairs);
                }
            }
            catch (Exception)
            {
                chartsAreSupported = false;
            }
        }
    }
}