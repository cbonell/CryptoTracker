
@inject IPriceAlertData priceAlertData
<button class="btn btn-primary" @onclick="createModal.ToggleDisplay">
    <i class="fa-@(hasAlert ? "solid" : "regular") fa-bell"></i>
</button>

<Modal @ref="createModal" OnSave="CreateAlert" Title="@($"Create alert for {CoinGeckId}")">
    Alert Type
    <select @bind="inputAlertType">
        <option value="@((int)AlertType.Below)">Below</option>
        <option value="@((int)AlertType.Above)">Above</option>
    </select>

    Alert Price
    <input type="number" @bind="inputAlertPrice" />
</Modal>
@code {
    [Parameter]
    public string UserId { get; set; } = "";
    [Parameter]
    [EditorRequired]
    public string CoinGeckId { get; set; } = "";
    Modal createModal;
    bool hasAlert = false;

    public CreateUserPriceAlert()
    {
        UserId = "";
        createModal = new();
    }

    int inputAlertType;
    double inputAlertPrice;

    protected override async Task OnParametersSetAsync()
    {
        var userAlerts = await priceAlertData.GetUserAlerts(UserId);
        hasAlert = userAlerts.Any(x => x.CoinGeckoId == CoinGeckId);
    }

    private async Task CreateAlert()
    {
        UserMetaDataContainer user = await Auth0Access.GetUserMetaData(UserId);
        await priceAlertData.CreatePriceAlert(UserId, CoinGeckId, user.Email, (AlertType)inputAlertType, inputAlertPrice);
        hasAlert = true;
    }
}
