@using MoonTrading.Pages

@inject AuthenticationStateProvider AuthState
@inject IMarketOrderData marketOrderData
@namespace MoonTrading.Shared
@inherits BasePage

@if (IsAuthenticated)
{
    <h3 class="text-center">Open Market Orders</h3>
    <RadzenDataGrid Data="@userMarketOrders" TItem="MarketOrderModel" AllowPaging="true" AllowSorting="true" PageSize="15">
        <Columns>
            <RadzenDataGridColumn TItem="MarketOrderModel" Property="OrderType" Title="Order Type" CssClass="text-center">
                <Template Context="coin">
                    @(coin.OrderType == 0 ? "Stop Market" : "Stop Loss")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MarketOrderModel" Property="Name" Title="Coin Name" CssClass="text-center">
                <Template Context="coin">
                    <img class="coin-img" src="@("https://s2.coinmarketcap.com/static/img/coins/32x32/" + coin.CoinMarketCapId + ".png")"> <a href="/Coin/@coin.CoinGeckoId">@coin.Name</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MarketOrderModel" Property="Quantity" Title="Quantity" CssClass="text-center" />
            <RadzenDataGridColumn TItem="MarketOrderModel" Property="PurchasePrice" Title="Price" CssClass="text-center" />
            <RadzenDataGridColumn TItem="MarketOrderModel" Property="Name" Title="Coin Name" CssClass="text-center">
                <Template Context="coin">
                    <button class="btn btn-danger" @onclick="(async () => await RemoveOrder(coin.Id))">Remove Order</button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IEnumerable<MarketOrderModel> userMarketOrders { get; set; } = Enumerable.Empty<MarketOrderModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        if (IsAuthenticated)
        {
            userMarketOrders = await marketOrderData.GetUserMarketOrders(UserId);
        }
    }

    private async Task RemoveOrder(string orderId)
    {
        int oId = int.Parse(orderId);
        await marketOrderData.DeleteMarketOrder(oId);
        userMarketOrders = userMarketOrders.Where(x => x.Id != orderId);
        StateHasChanged();
    }
}
