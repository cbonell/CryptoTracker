@using System.Security.Claims
@using MoonTrading.Pages
@inject AuthenticationStateProvider AuthState
@inject ITradingPurchaseData tradingData
@namespace MoonTrading.Shared
@inherits BasePage

<AuthorizeView>
    <Authorized>
        <h3 class="text-center">Trading History</h3>

        <RadzenDataGrid Data="@UserTrades" TItem="TradingPurchaseModel" AllowPaging="true" AllowSorting="true" PageSize="15">
            <Columns>
                <RadzenDataGridColumn TItem="TradingPurchaseModel" Property="CoinName" Title="Coin Name" CssClass="text-center">
                    <Template Context="coin">
                        <img class="coin-img" src="@("https://s2.coinmarketcap.com/static/img/coins/32x32/" + coin.CoinMarketCapCoinId + ".png")"> <a href="/Coin/@coin.CoinMarketCapCoinId">@coin.CoinName</a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TradingPurchaseModel" Property="TransactionType" Title="Transaction Type" CssClass="text-center" />
                <RadzenDataGridColumn TItem="TradingPurchaseModel" Property="Quantity" Title="Quantity" CssClass="text-center" />
                <RadzenDataGridColumn TItem="TradingPurchaseModel" Property="PurchasePrice" Title="Purchase Price" CssClass="text-center" />
                <RadzenDataGridColumn TItem="TradingPurchaseModel" Property="PurchaseDate" Title="Purchase Date" CssClass="text-center" />
            </Columns>
        </RadzenDataGrid>
    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<TradingPurchaseModel> UserTrades { get; set; } = Enumerable.Empty<TradingPurchaseModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (IsAuthenticated)
        {
            await GetTradingHistory(UserId);
        }
    }

    private async Task GetTradingHistory(string userId) => UserTrades = await tradingData.GetUserTradingHistory(userId);
}
