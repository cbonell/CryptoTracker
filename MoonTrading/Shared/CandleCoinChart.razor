@inject IJSRuntime js
@inject ICoinGeckoData geckoData
@inject ICryptoWatchData cryptoWatch
@namespace MoonTrading.Shared
@using static MoonTrading.DataAccess.Data.CryptoWatchData

@if (chartsAreSupported)
{
    <EditForm Model="rangeInput">
        <InputRadioGroup @bind-Value="rangeInput.Name">
            @foreach (string type in ChartUserTimeOptions)
            {
            <InputRadio Value="type" class="form-check-input" @onclick="LoadData" />
            <label class="form-check-label">
                @type
            </label>
            }
    </InputRadioGroup>
</EditForm>

}
else
{
    <p>This feature is not supported for this coin</p>
}

<div id="@chartId"></div>

@code {
    [Parameter]
    [EditorRequired]
    public CoinGeckCoinModel Coin { get; set; } = new();
    List<OHLCPairModel> candleData;
    RangeInput rangeInput = new RangeInput();
    private static string chartId = "chartv2";
    bool chartsAreSupported = true;

    public CandleCoinChart()
    {
        rangeInput = new RangeInput()
            {
                Name = "1h"
            };
        candleData = new List<OHLCPairModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        DateTimeOffset fromDate = GetOffsetFromInterval(rangeInput.Name);
        try
        {
            candleData = await cryptoWatch.GetOHLCPairs(Coin.Symbol, fromDate, rangeInput.Name);
            await js.InvokeVoidAsync("makeCandleChart", chartId, candleData);
        }
        catch(Exception)
        {
            chartsAreSupported = false;
        }
    }
}
