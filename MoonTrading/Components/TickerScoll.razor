@inject ICoinGeckoData geckoData
@using static MoonTrading.Tools.Extensions.Extensions

<div class="main-container">
    <div class="@tickerClass">

        <div class="flex-container">
            @foreach (CoinGeckoTrendingModel coin in trendingCoins ?? Enumerable.Empty<CoinGeckoTrendingModel>())
            {
                <div class="flex-item">
                    <Pill>
                        Rank #@(coin.MarketCapRank)
                        <div class="">
                            <img src="@coin.ImagePath" class="img-small" /> <a href="/Coin/@coin.Id">@coin.Name (@coin.Symbol)</a>
                        </div>
                        <div class="large-text">
                            $@coin.CurrentPriceUsd.AsFormattedNumber()
                            <span class="@(GetPriceArrowClass(coin.PriceChange24hr)+"-flex")"></span>
                            <span class="@(GetPriceColorClass(coin.PriceChange24hr))">
                                @( Math.Abs(Math.Round(coin.PriceChange24hr, 2)))%
                            </span>
                        </div>
                    </Pill>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CoinGeckoTrendingModel> trendingCoins;
    string tickerClass = "img-ticker";
    protected override async Task OnInitializedAsync()
    {
        trendingCoins = await geckoData.GetTrending();
    }
}
