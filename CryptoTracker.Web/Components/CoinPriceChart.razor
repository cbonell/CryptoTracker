@using System.Globalization
@using CryptoTracker.DataAccess.CoinGeckoAccess
@using static CryptoTracker.Web.Components.CandleCoinChart
@inject ICoinGeckoData geckoData
@inject IJSRuntime js

@if (priceData.Count > 0)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-sm-4 btn-group">
                <button id="chartDrawButton" class="btn btn-primary">Draw</button>
                <button id="chartDrawCloseButton" class="btn btn-danger" style="display: none">Close</button>
            </div>
        </div>
    </div>

    @*Used as a placeholder for the drawing chart*@
    <div id="canvasParent"></div>
}


<div class="chartWrapper">
    <EditForm Model="rangeInput">
        <InputRadioGroup @bind-Value="rangeInput.Name">
            @foreach (string type in ChartUserTimeOptions)
            {
                <InputRadio Value="type" class="form-check-input" />
                <label class="form-check-label">
                    @type
                </label>
            }
        </InputRadioGroup>
        <button type="button" @onclick="LoadData" class="btn btn-primary">Load</button>
    </EditForm>
    <div id="priceWrapper">
        <div id="linechart_div"></div>
    </div>
    <div id="chart_div"></div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public CoinGeckCoinModel Coin { get; set; }

    RangeInput rangeInput;
    List<VolumePairModel> barData;
    List<DatePricePairModel> priceData;
    int numDays = 7;

    public CoinPriceChart()
    {
        rangeInput = new();
        Coin = new();
        priceData = new();
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMMM dd h:mm tt");
        }

        return string.Empty;
    }

    string FormatAsUSD(object value)
    {
        if (value != null)
        {
            return Convert.ToDouble(value).ToString("C2");
        }

        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        priceData = await geckoData.GetPriceHistory(Coin.Id, rangeInput.Name);
        barData = await geckoData.GetCoinVolume(Coin.Id, rangeInput.Name);
        await js.InvokeVoidAsync("makeBarChart", "chart_div", barData);
        await js.InvokeVoidAsync("makeLineChart", "linechart_div", priceData);
    }
}