@using System.Globalization
@using CryptoTracker.DataAccess.CoinGeckoAccess
@inject ICoinGeckoData geckoData
@inject IJSRuntime js

@if (data.Count > 0)
{
    @*Used as a placeholder for the drawing chart*@
    <div id="canvasParent"></div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-sm-4 btn-group">
                <button id="chartDrawButton" class="btn btn-primary">Draw</button>
                <button id="chartDrawCloseButton" class="btn btn-danger" style="display: none">Close</button>
            </div>
        </div>
    </div>
}
<div id="priceWrapper">
    @if (data.Count > 0 && false)
    {
        <RadzenChart>
            <RadzenLineSeries Smooth="true" Data="@data" CategoryProperty="TimeStamp" Title="24hr Price" LineType="LineType.Solid" ValueProperty="Price">
                <RadzenMarkers MarkerType="MarkerType.Square" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
            <RadzenValueAxis Formatter=@FormatAsUSD>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Price in USD" />
            </RadzenValueAxis>
        </RadzenChart>
    }
    <div id="linechart_div" style="width: 60vw; height: 20vh;"></div>

</div>

<canvas width="1280" height="720" id="testcanvas"></canvas> @*style="display: @(vis ? "block" : "none")"*@
<div id="chart_div" style="width: 100vw; height: 20vh;"></div>
@*}*@

@code {


    [Parameter]
    [EditorRequired]
    public CoinMarketCapMetaDataModel Coin { get; set; }

    List<OHLCPairModel> candleData;
    List<VolumePairModel> barData;

    public CoinPriceChart()
    {
        Coin = new CoinMarketCapMetaDataModel();
        candleData = new();
        barData = new();
    }


    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMMM dd h:mm tt");
        }

        return string.Empty;
    }

    string FormatAsUSD(object value)
    {
        if (value != null)
        {
            return Convert.ToDouble(value).ToString("C2");
        }

        return string.Empty;
    }


    class DataItem
    {
        public string TimeStamp { get; set; } = "";
        public double Price { get; set; }
    }

    List<DataItem> data = new List<DataItem>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Coin.Name))
        {
            foreach (Tuple<double, string> d in (await geckoData.GetPriceHistory(Coin.Name)))
            {
                data.Add(new DataItem() { TimeStamp = d.Item2, Price = d.Item1 });
            }
        }

        barData = await geckoData.GetCoinVolume(Coin.Name, 7);
        candleData = await geckoData.GetOHLCPairs(Coin.Name);
        await js.InvokeVoidAsync("makeCandleChart", "testcanvas", candleData);
        await js.InvokeVoidAsync("makeBarChart", "chart_div", barData);
        await js.InvokeVoidAsync("makeLineChart", "linechart_div", data);
    }
    }
