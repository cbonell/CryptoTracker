@using System.Globalization
@using CryptoTracker.DataAccess.CoinGeckoAccess
@inject ICoinGeckoData gd;
@if (data.Count > 0)
{
    <RadzenChart>
        <RadzenLineSeries Smooth="true" Data="@data" CategoryProperty="Date" Title="24hr Price" LineType="LineType.Solid" ValueProperty="Revenue">
            <RadzenMarkers MarkerType="MarkerType.Square" />
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
        <RadzenValueAxis Formatter="FormatAsUSD">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Price in USD" />
        </RadzenValueAxis>
    </RadzenChart>
}

@code {


    [Parameter]
    [EditorRequired]
    public CoinMarketCapMetaDataModel Coin { get; set; }

    public CoinPriceChart()
    {
        Coin = new CoinMarketCapMetaDataModel();
    }


    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMMM dd h:mm tt");
        }

        return string.Empty;
    }

     string FormatAsUSD(object value)
    {
        if (value != null)
        {
            return Convert.ToDouble(value).ToString("C2");
        }

        return string.Empty;
    }


    class DataItem
    {
        public string Date { get; set; } = "";
        public double Revenue { get; set; }
    }

    List<DataItem> data = new List<DataItem>();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Coin.Name))
        {
            foreach (Tuple<double, string> d in (await gd.GetPriceHistory(Coin.Name)))
            {
                data.Add(new DataItem() { Date = d.Item2, Revenue = d.Item1 });
            }
        }
    }
}
