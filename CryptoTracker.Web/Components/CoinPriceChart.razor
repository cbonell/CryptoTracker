@using System.Globalization
@using CryptoTracker.DataAccess.CoinGeckoAccess
@inject ICoinGeckoData geckoData
@inject IJSRuntime js

@if (priceData.Count > 0)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-sm-4 btn-group">
                <button id="chartDrawButton" class="btn btn-primary">Draw</button>
                <button id="chartDrawCloseButton" class="btn btn-danger" style="display: none">Close</button>
            </div>
        </div>
    </div>

    @*Used as a placeholder for the drawing chart*@
    <div id="canvasParent"></div>
}

<div class="chartWrapper">
    <div id="priceWrapper">
        <div id="linechart_div" style="width: 62vw; height: 20vh;"></div>
    </div>
    <div id="chart_div" style="width: 62vw; height: 20vh;"></div>
    @*<div class="mainBorder">*@
    <canvas style="width: 62vw; height: 40vh;" id="testcanvas"></canvas> @*style="display: @(vis ? "block" : "none")"*@
    @*<canvas width="1280" height="720" id="testcanvas"></canvas> style="display: @(vis ? "block" : "none")"*@
    @*</div>*@
</div>

@code {


    [Parameter]
    [EditorRequired]
    public CoinMarketCapMetaDataModel Coin { get; set; }

    List<OHLCPairModel> candleData;
    List<VolumePairModel> barData;
    List<DatePricePairModel> priceData;

    public CoinPriceChart()
    {
        Coin = new();
        candleData = new();
        barData = new();
        priceData = new();
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMMM dd h:mm tt");
        }

        return string.Empty;
    }

    string FormatAsUSD(object value)
    {
        if (value != null)
        {
            return Convert.ToDouble(value).ToString("C2");
        }

        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        priceData = await geckoData.GetPriceHistory(Coin.Name);
        barData = await geckoData.GetCoinVolume(Coin.Name, 7);
        candleData = await geckoData.GetOHLCPairs(Coin.Name);
        await js.InvokeVoidAsync("makeCandleChart", "testcanvas", candleData);
        await js.InvokeVoidAsync("makeBarChart", "chart_div", barData);
        await js.InvokeVoidAsync("makeLineChart", "linechart_div", priceData);
    }
}