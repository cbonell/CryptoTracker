@inject IJSRuntime js
@inject ICoinGeckoData geckoData
@inject ICryptoFacilitiesData cfd

<EditForm Model="rangeInput">
    <InputRadioGroup @bind-Value="rangeInput.Name">
        @foreach (string type in ChartUserTimeOptions)
        {
            <InputRadio Value="type" class="form-check-input" @onclick="LoadData" />
            <label class="form-check-label">
                @type
            </label>
        }
    </InputRadioGroup>
</EditForm>

<div class="row">
    <div class="col">
        @*<LoadingSpinner />*@
        <canvas id="candleCanvas"></canvas>
    </div>
</div>


@code {
    [Parameter]
    [EditorRequired]
    public CoinGeckCoinModel Coin { get; set; }
    List<OHLCPairModel> candleData;
    RangeInput rangeInput = new RangeInput();

    public CandleCoinChart()
    {
        rangeInput = new RangeInput()
        {
            Name = "1h"
        };
    }

    int renderCount = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (renderCount < 2)
        {
            await LoadData();
            renderCount++;
        }

    }

    protected async Task LoadData()
    {
        DateTimeOffset fromDate = cfd.GetOffsetFromInterval(rangeInput.Name);
        candleData = await cfd.GetOHLCPairs(Coin.Symbol, fromDate, rangeInput.Name);
        await js.InvokeVoidAsync("makeCandleChart", "candleCanvas", candleData);
    }
}
