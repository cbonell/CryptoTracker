@using System.Timers
@using System.Security.Claims
@using CryptoTracker.DataAccess.CoinGeckoAccess
@using CryptoTracker.DataAccess.MLModelAccess
@using CryptoTracker.Web.Pages

@inject ICurrencyData currencyData
@inject ITradingPurchaseData tradingPurchaseData
@inject IUserWalletData userWalletData
@inject ICoinGeckoData coinGeckoData
@inject ICoinMarketCapData marketCapData
@inject IMLModelData mlModelData

@inherits BasePage

<Modal @ref=purchaseModal
       Title="Purchase Confirmation">
    @Coin.Name purchased at @purcahsePrice
</Modal>

<Modal @ref=sellModal
       Title="Sale Confirmation">
    Sold @numberToSell @Coin.Name at @purcahsePrice
</Modal>

<Modal @ref=purcahseConfirmationModal Title="Purchase Confirmation">
    Are you sure that you want to purchase @numberToBuy @Coin.Name for @liveConvertedPurchasePrice.ToString("C0")?
</Modal>
<RadzenCard>
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Trade">
                Current price: @currentPrice
                <input type="number" placeholder="Number of @Coin.Name" class="form-control" @bind="numberToBuy" />
                <button @onclick="() => MakePurchase()" class="btn btn-primary">Purchase</button>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Sell">
                Current price: @currentPrice
                <small>Max you can sell @userWallet.Quantity</small>
                <input type="number" placeholder="Number of @Coin.Symbol" class="form-control" @bind="numberToSell" />
                <button @onclick="Sell" class="form-control">Sell</button>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenCard>

@code {
    [Parameter]
    [EditorRequired]
    public CoinGeckCoinModel Coin { get; set; }

    double currentPrice;
    double purcahsePrice;
    double liveConvertedPurchasePrice;
    string predictionMsg = "";
    string predictionTime = "";

    double? numberToSell, numberToBuy;
    Modal purchaseModal, sellModal, purcahseConfirmationModal;
    UserWalletModel userWallet { get; set; }

    public CoinPurchasePanel()
    {
        purchaseModal = sellModal = purcahseConfirmationModal = new();
        userWallet = new();
        Coin = new();
    }

    private System.Threading.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetTimer();
    }

    private async Task LoadData()
    {
        if (IsAuthenticated)
        {
            var tempWallet = await userWalletData.GetUserWallet(UserId);
            if (tempWallet != null && tempWallet.Count() > 0)
            {
                userWallet = tempWallet.Where(x => x.CurrencyId == Coin.CoinMarketCapId).FirstOrDefault() ?? new UserWalletModel();
            }
        }
    }

    private void SetTimer()
    {

        if (timer == null)
        {
            timer = new System.Threading.Timer(async (object? stateInfo) =>
            {
                try
                {
                    currentPrice = await coinGeckoData.GetPriceInUsd(Coin.Id);
                }
                catch{}
                await InvokeAsync(() => StateHasChanged()); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
            }, new System.Threading.AutoResetEvent(false), 2000, 2000); // fire every 2000 milliseconds
        }
    }

    void Refresh()
    {
        Random rd = new Random();
        currentPrice = rd.Next(100, 30000);
        currentPrice += (rd.Next(1, 99) / (double)10);
        //StateHasChanged();
    }

    protected async Task MakePurchase(bool isConfirmed = false)
    {
        if (IsAuthenticated)
        {
            if (isConfirmed)
            {

                //await tradingPurchaseData.Purchase(UserId, Coin, 100, numberToBuy ?? 0, currentPrice, DateTime.Now);
            }
            else
            {
                liveConvertedPurchasePrice = await coinGeckoData.GetPriceInUsd(Coin.Id, 1);
                purcahseConfirmationModal.ToggleDisplay();
            }
        }
        purchaseModal.ToggleDisplay();
        purcahsePrice = currentPrice;
    }

    private async Task Sell()
    {
        if (IsAuthenticated)
        {
            //await tradingPurchaseData.Sell(UserId, Coin.Id, numberToSell ?? 0, currentPrice, DateTime.Now);
            await LoadData();
        }
        sellModal.ToggleDisplay();
        purcahsePrice = currentPrice;
    }
}
