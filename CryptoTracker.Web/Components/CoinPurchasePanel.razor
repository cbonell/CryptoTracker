@using System.Timers
@using System.Security.Claims

@inject ICurrencyData currencyData
@inject ITradingPurchaseData tradingPurchaseData
@inject AuthenticationStateProvider authState

<Modal @ref=modal
    Title="Purchase Confirmation">@Currency.Name purchased at @purcahsePrice</Modal>
<RadzenCard>
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Trade">
                Current price: @currentPrice
                <input type="text" placeholder="Amount USD" />
                <button @onclick="MakePurchase">Purchase</button>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenCard>

@code {
    [Parameter]
    [EditorRequired]
    public int CoinMarketCapId { get; set; }
    double currentPrice;
    double purcahsePrice;
    private CurrencyModel Currency;
    Modal modal;
    public CoinPurchasePanel()
    {
        modal = new();
        Currency = new();
    }

    private System.Threading.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetTimer();
    }

    private async Task LoadData()
    {
        var tempCurrencies = await currencyData.GetCurrencyByCoinMarketCapId(CoinMarketCapId, ICurrencyData.CurrencyType.Coin);
        if(tempCurrencies.Count() > 1)
        {
            throw new Exception("Expected only one currency models to be returned to encountered multipiple");
        }
        else if(tempCurrencies.Count() != 0)
        {
            Currency = tempCurrencies.First();
        }        
    }

    private void SetTimer()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            Refresh();
            await InvokeAsync(() => StateHasChanged()); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
        }, new System.Threading.AutoResetEvent(false), 2000, 2000); // fire every 2000 milliseconds
    }

    void Refresh()
    {
        Random rd = new Random();
        currentPrice = rd.Next(100, 30000);
        currentPrice += (rd.Next(1, 99) / (double)10);
        //StateHasChanged();
    }

    protected async Task MakePurchase()
    {
        var state = await authState.GetAuthenticationStateAsync();
        if (state != null && state.User != null && state.User.Identity != null)
        {
            if (state.User.Identity.IsAuthenticated)
            {
                var tempUserClaim = state.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
                if (tempUserClaim != null)
                {
                    string userId = tempUserClaim.Value;
                    await tradingPurchaseData.MakePurchase(userId, Currency.Id, 100, 10, currentPrice, DateTime.Now);
                }
            }
        }

        purcahsePrice = currentPrice;
        
        modal.ToggleDisplay();
    }
}
