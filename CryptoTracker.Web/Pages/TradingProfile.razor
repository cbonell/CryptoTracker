@page "/MyWallet"

@using System.Security.Claims
@using CryptoTracker.Web.Components
@using static Tools.Extensions.DoubleExtensions

@inject AuthenticationStateProvider AuthState
@inject IUserWalletData userWallet

<h2>Wallet</h2>
<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Fiat">
            @foreach(UserWalletModel currency in Fiats)
            {
                <p> @currency.Sign@currency.Quantity.AsFormattedNumber() @currency.Symbol (@currency.CurrencyName)</p>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="Coin">
            @foreach(UserWalletModel currency in Coins)
            {
                <p>@currency.Quantity.AsFormattedNumber() <img class="coin-img" src="@("https://s2.coinmarketcap.com/static/img/coins/32x32/" + currency.CoinMarketCapId + ".png")">@currency.CurrencyName </p>
            }
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<UserFavorites/>

<UserTradingHistory/>

<Modal @ref="AddInitialWalletModal"
       SaveButtonText="Yes"
       CancelButtonText="No"
       Title=""
       OnSave="OnConfirmCreateWallet">
    You dont have a paper trading wallet set up yet, would you like to create one now?
</Modal>
@code {
    Modal AddInitialWalletModal { get; set; } = new();
    string userId = "";

    protected IEnumerable<UserWalletModel> UserWallet { get; set; } = Enumerable.Empty<UserWalletModel>();
    protected IEnumerable<UserWalletModel> Fiats
    {
        get
        {
            if (UserWallet != null && UserWallet.Count() > 0)
            {
                return UserWallet.Where(x => x.CurrencyTypeId == (int)ICurrencyData.CurrencyType.Fiat);
            }

            return Enumerable.Empty<UserWalletModel>();
        }
    }
    
    protected IEnumerable<UserWalletModel> Coins
    {
        get
        {
            if (UserWallet != null && UserWallet.Count() > 0)
            {
                return UserWallet.Where(x => x.CurrencyTypeId == (int)ICurrencyData.CurrencyType.Coin);
            }

            return Enumerable.Empty<UserWalletModel>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        if (state != null && state.User != null && state.User.Identity != null)
        {
            if (state.User.Identity.IsAuthenticated)
            {
                var tempUserClaim = state.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
                if (tempUserClaim != null)
                {
                    userId = tempUserClaim.Value;
                }
            }
        }

        await LoadData();
    }

    protected async Task LoadData()
    {
        if (!string.IsNullOrWhiteSpace(userId))
        {
            UserWallet = await userWallet.GetUserWallet(userId);
            if (UserWallet.Count() <= 0)
            {
                AddInitialWalletModal.ToggleDisplay();
                return;
            }
        }
    }

    private async Task OnConfirmCreateWallet() => await userWallet.InitializeUserWalletForPaperTrading(userId);
}
