@page "/Coin/{CoinId}"
@using CryptoTracker.Web.Components
@using System.Security.Claims
@using CryptoTracker.DataAccess.Auth0

@inject IUserFavoriteCoinData favoriteCoinData
@inject ICurrencyData currencyData
@inject IUserFavoriteCoinData favoriteCoinData
@inject IJSRuntime js
@inject ICoinGeckoData coinGeckoData

@inherits BasePage
<PageTitle>@CoinModel.Name - Details</PageTitle>

@if (loading)
{
    <LoadingSpinner />
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <div class="row mainBorder">
                @if (createUserPriceAlert != null && IsAuthenticated)
                {
                    <button @onclick="createUserPriceAlert.Open">Create Alert</button>
                }
                @*<CoinPurchasePanel Coin="CoinModel" />*@
            </div>
            <div class="row mainBorder">
                <TrendingTweets CoinName="@CoinModel.Symbol" />
            </div>
        </div>
        <div class="col-8">
            <div class="row mainBorder">
                <CoinPriceChart Coin="CoinModel" />
            </div>
            <div class="row mainBorder">
                <AuthorizeView>
                    <Authorized>
                        <StarCheckBox ticked="isUersFavorite" OnToggle="HandleFavoriteToggle" />
                    </Authorized>
                    <NotAuthorized>Login in to add to favorites</NotAuthorized>
                </AuthorizeView>

                <CoinDetails Coin="coinGeckoMetaDataModel" />
            </div>
        </div>
    </div>
}


@*<CreateUserPriceAlert @ref="createUserPriceAlert" coinMarketCapId="data.CoinMarketCapId" UserId="@UserId" />*@

@code {
    [Parameter]
    public string CoinId { get; set; }


    public CoinGeckCoinModel CoinModel { get; set; }
    private CoinGeckoMetaDataModel coinGeckoMetaDataModel { get; set; }

    bool loading = false;
    private CurrencyModel Currency;
    bool isUersFavorite = false;
    CreateUserPriceAlert createUserPriceAlert;

    public Coin()
    {
        Currency = new();
        createUserPriceAlert = new();
        CoinModel = new();
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        if (int.TryParse(CoinId, out int coinId))
        {
            CoinModel = await coinGeckoData.GetTradeableCoinByCoinMarketCapId(coinId);
        }
        else
        {
            CoinModel = await coinGeckoData.GetTradeableCoinByCoinGeckoId(CoinId);
        }

        coinGeckoMetaDataModel = await coinGeckoData.GetMetaData(CoinModel.Id);
        await SetLogo(coinGeckoMetaDataModel.image.thumb);

        if (IsAuthenticated)
        {
            isUersFavorite = await favoriteCoinData.CheckIfCoinIsUsersFavorite(UserId, Currency.Id);
        }

        loading = false;
    }

    private async Task HandleFavoriteToggle(bool isChecked)
    {
        isUersFavorite = isChecked;
        if (isChecked)
        {
            await AddFavorite();
        }
        else
        {
            await RemoveFavorite();
        }
    }

    private async Task AddFavorite()
    {
        if (IsAuthenticated)
        {
            await favoriteCoinData.AddUserFavoriteCoin(UserId, Currency.Id);
        }
    }

    private async Task RemoveFavorite()
    {
        if (IsAuthenticated)
        {
            await favoriteCoinData.RemoveUserFavoriteCoin(UserId, Currency.Id);
        }
    }

    private async Task SetLogo(string path)
    {
        await js.InvokeVoidAsync("setIcon", path);
    }
}
